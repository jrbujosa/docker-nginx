Con este boceto, diseña el funcionamiento y contenido deun simulador para ejecutarse en una página web. 

Borrador de especificaciones para que lo revises y mejores

Simulador Asíncrono (fetch y Promesas/Async-Await):

Objetivo:  El simulador es para estudiantes de nivel básico. De forma simplificada, Visualizar cómo JavaScript maneja operaciones que toman tiempo (como llamadas de red) sin bloquear la interfaz


Funcionamiento del simulador: Un botón que al hacer clic llama a una función JS que usa fetch para "obtener" datos de una URL simulada, y luego actualiza un div con la respuesta usando .then() o async/await. Incluir un console.log antes y después de la llamada a fetch.

Visualización:

- Panel Izquierdo: Botón y div de resultados. Código JS con fetch.

- Panel Central Representación del Event Loop: Call Stack, Web API, Tasks Queue, evento loop

- Panel Derecho : "Log / Consola Simulada": Muestra console.log y el estado de la petición/respuesta.

Pasos Simulados: Clic -> JS añade función al Call Stack -> Se ejecuta console.log (antes) -> Se ejecuta fetch -> fetch se pasa a Web APIs -> fetch devuelve una Promesa (pendiente) -> Se ejecuta console.log (después) 

En la parte de abajo del simulador añade las siguientes explicaciones:

- La Necesidad de Asincronía y Fetch.
- Implicaciones del uso de Get y Post (get por defecto) 
- La función de los componentes que aparecen en el diagrama "Representación del Event Loop:" 
- Manejo de Datos: Formatos de Respuesta 
- Uso de Chrome DevTools par depuración 
- Un glosario de términos
- Cualquier otro aspecto que consideres relevante